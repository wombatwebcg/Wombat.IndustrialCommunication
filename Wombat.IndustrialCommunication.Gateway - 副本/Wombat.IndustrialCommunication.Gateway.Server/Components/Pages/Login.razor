@page "/login"
@using Microsoft.AspNetCore.Authorization
@using BootstrapBlazor.Components
@attribute [AllowAnonymous]
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Login> Localizer
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Wombat.IndustrialCommunication.Gateway.Server.Services

<PageTitle>登录 - 设备网关系统</PageTitle>

<div class="login-container">
    <div class="login-box">
        <div class="login-header">
            <img src="images/logo.png" alt="Logo" class="login-logo" />
            <h2 class="text-primary mb-4">设备网关系统</h2>
            <p class="text-muted">欢迎回来，请登录您的账号</p>
        </div>
        <div class="login-form">
            <ValidateForm Model="@loginModel" OnValidSubmit="@HandleLogin" FormName="loginForm">
                <div class="form-group">
                    <BootstrapInput @bind-value="loginModel.Username" PlaceHolder="请输入用户名" LabelText="用户名" />
                </div>
                <div class="form-group">
                    <BootstrapInput @bind-value="loginModel.Password" PlaceHolder="请输入密码" type="password" LabelText="密码" />
                </div>
                <div class="form-group d-flex justify-content-between align-items-center">
                    <Checkbox Value="@loginModel.RememberMe" ValueChanged="@((bool value) => loginModel.RememberMe = value)" ShowLabel="true" LabelText="记住我" />
                    <a href="#" class="forgot-password">忘记密码？</a>
                </div>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <Alert AlertType="AlertType.Danger" ShowIcon="true" class="mb-3">
                        <i class="fa-solid fa-circle-exclamation me-2"></i>
                        @errorMessage
                    </Alert>
                }
                <div class="form-group">
                    <Button ButtonType="ButtonType.Submit" Color="Color.Primary" Icon="fa-solid fa-right-to-bracket" Text="登录" IsAsync="true" class="w-100 login-button" />
                </div>
            </ValidateForm>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new()
    {
        Username = "admin",
        Password = "admin",
        RememberMe = true
    };
    private string? errorMessage;

    private class LoginModel
    {
        [Required(ErrorMessage = "用户名不能为空")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "密码不能为空")]
        public string Password { get; set; } = "";

        public bool RememberMe { get; set; }
    }

    private async Task HandleLogin(EditContext context)
    {
        if (string.IsNullOrWhiteSpace(loginModel.Username) || string.IsNullOrWhiteSpace(loginModel.Password))
        {
            errorMessage = "用户名和密码不能为空";
            return;
        }

        // TODO: 实现实际的登录逻辑
        // 这里使用模拟的登录验证
        if (loginModel.Username=="admin"&&loginModel.Password=="admin")
        {
            var authStateProvider = (CustomAuthStateProvider)AuthenticationStateProvider;
            var identity = new ClaimsIdentity(new[]
            {
                new Claim(ClaimTypes.Name, loginModel.Username),
                new Claim(ClaimTypes.Role, "Administrator")
            }, "CustomAuth");

            var user = new ClaimsPrincipal(identity);          
            authStateProvider.NotifyAuthenticationStateChanged(user);
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            errorMessage = "用户名或密码错误";
        }
    }
}

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 80vh;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        margin: 0;
        padding: 2rem;
    }

    .login-box {
        width: 100%;
        max-width: 380px;
        padding: 2.5rem;
        background: white;
        border-radius: 16px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        margin: 1rem;
    }

    .login-header {
        text-align: center;
        margin-bottom: 2.5rem;
    }

    .login-logo {
        width: 80px;
        height: 80px;
        margin-bottom: 1.5rem;
        transition: transform 0.3s ease;
    }

    .login-logo:hover {
        transform: scale(1.05);
    }

    .login-form {
        display: flex;
        flex-direction: column;
        gap: 1.25rem;
    }

    .form-group {
        margin-bottom: 1.25rem;
    }

    .login-button {
        padding: 0.75rem;
        font-size: 1rem;
        font-weight: 500;
        transition: all 0.3s ease;
        border-radius: 8px;
        margin-top: 0.5rem;
    }

    .login-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
    }

    .forgot-password {
        color: #6c757d;
        text-decoration: none;
        font-size: 0.9rem;
        transition: color 0.3s ease;
    }

    .forgot-password:hover {
        color: #0d6efd;
        text-decoration: underline;
    }

    :deep(.form-label) {
        font-weight: 500;
        color: #495057;
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
    }

    :deep(.form-control) {
        border-radius: 8px;
        padding: 0.75rem 1rem;
        border: 1.5px solid #e9ecef;
        transition: all 0.3s ease;
        font-size: 0.95rem;
        height: auto;
    }

    :deep(.form-control:focus) {
        border-color: #0d6efd;
        box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.15);
    }

    :deep(.form-check-input:checked) {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }

    :deep(.form-check-label) {
        color: #6c757d;
        font-size: 0.9rem;
    }

    :deep(.form-group) {
        margin-bottom: 1rem;
    }

    :deep(.form-check) {
        margin-top: 0.5rem;
    }
</style>

<style>
    @@media (max-width: 576px) {
        .login-box {
            padding: 2rem;
            margin: 0.5rem;
        }
    }
</style>
